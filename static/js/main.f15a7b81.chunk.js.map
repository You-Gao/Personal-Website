{"version":3,"sources":["reportWebVitals.js","loading/Loading.js","navbar/Navbar.js","background/Background.js","particles/Particles.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","LoadingAnimation","nameRef","useRef","GsvgRef","tl","gsap","timeline","repeat","ease","YsvgRef","t2","useEffect","fromTo","current","opacity","duration","rotation","y","React","createElement","className","ref","width","height","xmlns","x1","y1","x2","y2","stroke","stroke-width","cx","cy","r","fill","Navbar","navbar","document","querySelector","navbar_container","interval","isFadedOut","yesClick","classList","remove","fadeOut","add","setTimeout","fadeIn","clearInterval","setInterval","addEventListener","removeEventListener","class","href","Background","canvasRef","scene","camera","renderer","model","THREE","background","window","innerWidth","innerHeight","position","set","lookAt","light","ambientLight","canvas","setSize","controls","OrbitControls","domElement","enableDamping","dampingFactor","loader","GLTFLoader","console","log","concat","load","gltf","scale","animate","requestAnimationFrame","update","render","init","dispose","Particles","particleSystem","aspect","updateProjectionMatrix","z","alpha","setClearColor","particlesGeometry","particlesMaterial","color","size","positions","Float32Array","particleCount","i","Math","random","setAttribute","App","showContent","setShowContent","useState","timer","clearTimeout","Fragment","Loading","ReactDOM","createRoot","getElementById","StrictMode"],"mappings":"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","file":"static/js/main.f15a7b81.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { useRef, useEffect } from 'react';\r\nimport { gsap } from 'gsap';\r\nimport './Loading.css';\r\n\r\nconst LoadingAnimation = () => {\r\n    const nameRef = useRef(null);\r\n    const GsvgRef = useRef(null);\r\n    const tl = gsap.timeline({ repeat: -1, ease: \"linear\" });\r\n    const YsvgRef = useRef(null);\r\n    const t2 = gsap.timeline({ repeat: -1, ease: \"linear\" });\r\n\r\n    useEffect(() => {\r\n        gsap.fromTo(nameRef.current, { opacity: 0 }, { opacity: 1, duration: 2 });\r\n\r\n        tl.fromTo(GsvgRef.current, \r\n            { rotation: 0 }, \r\n            { rotation: 360, duration: 2 }\r\n        )\r\n        .fromTo(GsvgRef.current, \r\n                { y: 0 }, \r\n                { y: -1000, duration: 2 }\r\n        );\r\n\r\n        t2.fromTo(YsvgRef.current,\r\n            { rotation: 0 },\r\n            { rotation: 360, duration: 2 }\r\n        )\r\n        .fromTo(YsvgRef.current,\r\n            { y: 0 },\r\n            { y: 1000, duration: 2 }\r\n        );\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"loader-container gradient\">\r\n            <div className=\"loader\">\r\n                <div className=\"svg-wrapper\">\r\n                    <div className=\"svg-container\" ref={YsvgRef}>\r\n                        <svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <line x1=\"10\" y1=\"10\" x2=\"50\" y2=\"50\" stroke=\"black\" stroke-width=\"5\"/>\r\n                            <line x1=\"90\" y1=\"10\" x2=\"50\" y2=\"50\" stroke=\"black\" stroke-width=\"5\"/>\r\n                            <line x1=\"50\" y1=\"50\" x2=\"50\" y2=\"90\" stroke=\"black\" stroke-width=\"5\"/>\r\n                        </svg>\r\n                    </div>\r\n                    <div className=\"svg-container\" ref={GsvgRef}>\r\n                        <svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"5\" fill=\"none\"/>\r\n                            <line x1=\"50\" y1=\"50\" x2=\"80\" y2=\"50\" stroke=\"black\" stroke-width=\"5\"/>\r\n                            <line x1=\"80\" y1=\"50\" x2=\"80\" y2=\"80\" stroke=\"black\" stroke-width=\"5\"/>\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingAnimation;","import React, { useEffect } from 'react';\r\nimport './Navbar.css';\r\n\r\nconst Navbar = () => {\r\n  useEffect(() => {\r\n    const navbar = document.querySelector('.navbar');\r\n    const navbar_container = document.querySelector('.navbar-container');\r\n    let isFadedOut = false;\r\n    let interval;\r\n    \r\n    const yesClick = () => {\r\n      if (navbar) {\r\n        navbar_container.classList.remove('no-click');\r\n      }\r\n    }\r\n\r\n    const noClick = () => {\r\n      if (navbar) {\r\n        navbar_container.classList.add('no-click');\r\n        setTimeout(yesClick, 4000);\r\n      }\r\n    }\r\n\r\n    const fadeOut = () => {\r\n      if (navbar) {\r\n        navbar.classList.add('fade-out');\r\n        navbar_container.classList.add('no-click');\r\n        noClick();\r\n        isFadedOut = true;\r\n      }\r\n    };\r\n\r\n    const fadeIn = () => {\r\n      if (navbar) {\r\n        navbar.classList.remove('fade-out');\r\n        isFadedOut = false;\r\n        clearInterval(interval); // Clear the fadeOut interval when hovered\r\n        interval = setInterval(fadeOut, 2000); // Restart the interval\r\n      }\r\n    };\r\n\r\n    interval = setInterval(fadeOut, 2000); // Initial fade-out after 3 seconds\r\n\r\n    if (navbar) {\r\n      navbar.addEventListener('mouseover', fadeIn);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(interval); // Cleanup the interval on component unmount\r\n      if (navbar) {\r\n        navbar.removeEventListener('mouseover', fadeIn);\r\n      }\r\n    };\r\n  }, []);\r\n    return (\r\n        <div class=\"navbar-container\">\r\n            <nav className=\"navbar\">\r\n                <div className=\"navbar-links\">\r\n                    <div><a href=\"/home\">Work</a></div>\r\n                    <div><a href=\"/about\">Projects</a></div>\r\n                </div>\r\n                <div className=\"navbar-logo\">\r\n                    <a href=\"/\">You Gao</a>\r\n                </div>\r\n                <div className=\"navbar-links\">\r\n                    <div><a href=\"/services\">About Me</a></div>\r\n                    <div><a href=\"https://blog.yougao.dev/\">To Blog</a></div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\nconst Background = () => {\r\n    const canvasRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        let scene, camera, renderer, model;\r\n\r\n        function init() {\r\n            // Create scene\r\n            scene = new THREE.Scene();\r\n            scene.background = new THREE.Color(0xffffff); // Set background color to white\r\n\r\n            // Create camera\r\n            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n            camera.position.set(10, 0, 0); // Position the camera above the scene\r\n            camera.lookAt(new THREE.Vector3(0, 0, 0));\r\n            scene.add(camera);\r\n\r\n            // Add light\r\n            const light = new THREE.DirectionalLight(0xffffff, 10); // Increased intensity to 10\r\n            light.position.set(0, 0, 1);\r\n            scene.add(light);\r\n            const ambientLight = new THREE.AmbientLight(0xffffff, 0.5); // Added ambient light\r\n            scene.add(ambientLight);\r\n\r\n            // Create renderer\r\n            renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current });\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n            // Add orbit controls\r\n            const controls = new OrbitControls(camera, renderer.domElement);\r\n            controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled\r\n            controls.dampingFactor = 0.25;\r\n\r\n            // Load the model\r\n            const loader = new GLTFLoader();\r\n            const modelPath = 'yoshi.glb'; // Adjust this path if necessary\r\n            console.log(`Loading model from path: ${modelPath}`);\r\n            loader.load(modelPath, (gltf) => {\r\n                model = gltf.scene;\r\n                model.scale.set(30, 30, 30); // Scale the model by a factor of 30\r\n                scene.add(model);\r\n            });\r\n\r\n            // Animation loop\r\n            function animate() {\r\n                requestAnimationFrame(animate);\r\n                controls.update(); // Update orbit controls\r\n                if (model) {\r\n                    model.rotation.y += 0.01; // Rotate the model\r\n                }\r\n                renderer.render(scene, camera);\r\n            }\r\n            animate();\r\n        }\r\n\r\n        init();\r\n\r\n        // Cleanup on component unmount\r\n        return () => {\r\n            if (renderer) {\r\n                renderer.dispose();\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    return <canvas ref={canvasRef} />;\r\n};\r\n\r\nexport default Background;","import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nconst Particles = () => {\r\n    const canvasRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        let scene, camera, renderer, particleSystem;\r\n\r\n        function init() {\r\n            // Scene\r\n            scene = new THREE.Scene();\r\n\r\n            // Camera\r\n            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n            camera.position.z = 5;\r\n\r\n            // Renderer\r\n            renderer = new THREE.WebGLRenderer({ alpha: true, canvas: canvasRef.current });\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n            renderer.setClearColor(0x000000, 0);\r\n\r\n            // Particles\r\n            const particleCount = 500;\r\n            const particlesGeometry = new THREE.SphereGeometry();\r\n            const particlesMaterial = new THREE.PointsMaterial({ color: 0x000000, size: 0.2 });\r\n\r\n            const positions = new Float32Array(particleCount * 3);\r\n            for (let i = 0; i < particleCount; i++) {\r\n                positions[i * 3] = (Math.random() - 0.5) * 10;\r\n                positions[i * 3 + 1] = (Math.random() - 0.5) * 10;\r\n                positions[i * 3 + 2] = (Math.random() - 0.5) * 10;\r\n            }\r\n\r\n            particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n            particleSystem = new THREE.Points(particlesGeometry, particlesMaterial);\r\n            scene.add(particleSystem);\r\n\r\n            animate();\r\n        }\r\n\r\n        function animate() {\r\n            requestAnimationFrame(animate);\r\n\r\n            particleSystem.rotation.y += 0.001;\r\n\r\n            renderer.render(scene, camera);\r\n        }\r\n\r\n        window.addEventListener('resize', () => {\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n        });\r\n\r\n        init();\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', () => {\r\n                camera.aspect = window.innerWidth / window.innerHeight;\r\n                camera.updateProjectionMatrix();\r\n                renderer.setSize(window.innerWidth, window.innerHeight);\r\n            });\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n            <canvas ref={canvasRef} />\r\n    );\r\n};\r\n\r\nexport default Particles;","import React, { useState, useEffect } from 'react';\r\nimport Loading from './loading/Loading';\r\nimport Navbar from './navbar/Navbar';\r\nimport Background from './background/Background';\r\nimport Particles from './particles/Particles';\r\nimport './App.css'; \r\n\r\nfunction App() {\r\n    const [showContent, setShowContent] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setShowContent(true);\r\n        }, 3000);\r\n\r\n        return () => clearTimeout(timer);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {showContent ? (\r\n                <>\r\n                    <div class=\"outer\">\r\n                        <Navbar />\r\n                        <div class=\"bottom\">\r\n                        <Background />\r\n                        </div>\r\n                        <div class=\"bottom noclick\">\r\n                        <Particles />\r\n                        </div>\r\n                    </div>\r\n\r\n                </>\r\n            ) : (\r\n                <Loading />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}