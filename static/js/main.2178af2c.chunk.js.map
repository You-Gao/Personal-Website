{"version":3,"sources":["reportWebVitals.js","home/loading/Loading.js","home/navbar/Navbar.js","home/background/Background.js","home/Home.js","about/navbar/Navbar.js","about/background/Background.js","about/About.js","work/navbar/Navbar.js","work/background/Background.js","work/Work.js","projects/navbar/Navbar.js","projects/background/recent_commits.js","projects/background/Background.js","projects/Projects.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","LoadingAnimation","nameRef","useRef","GsvgRef","tl","gsap","timeline","repeat","ease","YsvgRef","t2","useEffect","fromTo","current","opacity","duration","rotation","y","React","createElement","className","ref","width","height","xmlns","x1","y1","x2","y2","stroke","stroke-width","cx","cy","r","fill","Navbar","navbar","document","querySelector","interval","isFadedOut","fadeOut","classList","add","fadeIn","remove","clearInterval","setInterval","addEventListener","removeEventListener","Link","to","href","Background","canvasRef","scene","camera","renderer","THREE","background","window","innerWidth","innerHeight","position","set","light","ambientLight","canvas","setSize","controls","OrbitControls","domElement","enableDamping","dampingFactor","particles_x","particles_y","particles_z","particlesGeometry","particlesMaterial","color","size","i","particle","x","Math","sin","PI","cos","z","animate","requestAnimationFrame","update","render","init","dispose","style","textAlign","Home","showContent","setShowContent","useState","timer","setTimeout","clearTimeout","Fragment","class","Loading","FontLoader","load","font","textGeometry","TextGeometry","textMaterial","textMesh","textGeometry2","textMaterial2","textMesh2","textGeometry3","textMaterial3","textMesh3","About","model","target","enableRotate","enablePan","enableZoom","fontLoader","textureLoader","loader","GLTFLoader","woodTexture","wrapS","wrapT","planeGeometry","planeMaterial","map","side","plane","wallTexture","leftWallGeometry","leftWallMaterial","leftWall","rightWallGeometry","rightWallMaterial","rightWall","backWallGeometry","backWallMaterial","backWall","ceilingGeometry","ceilingMaterial","ceiling","numWalls","leftDoorWallGeometry","leftDoorWallMaterial","leftDoorWall","rightDoorWallGeometry","rightDoorWallMaterial","rightDoorWall","middleWallGeometry","middleWallMaterial","middleWall","createWalls","numDoors","modelPath_e","console","log","concat","gltf","scale","createDoors","posters","testPoser","testMaterial","test","push","mesh","curveSegments","bevelEnabled","text","text2","texture","boxGeometry","boxMaterial","box","deskGeometry","deskMaterial","desk","deskGeometry1","deskMaterial1","desk1","deskGeometry2","deskMaterial2","desk2","circles","targetX","targetY","targetZ","forEach","data","circleGeometry","circleMaterial","circle","raycaster","mouse","event","clientX","clientY","setFromCamera","intersectCircles","intersectObjects","c","intersectPosters","p","length","intersectedCircle","find","object","intersectedPoster","square","top","left","backgroundColor","onclick","body","removeChild","appendChild","isAnimating","currentCameraPosition","currentTargetPosition","onComplete","key","aspect","updateProjectionMatrix","async","getRecentCommits","username","commitList","getElementById","innerHTML","reposResponse","fetch","events","json","allCommits","type","repoName","repo","name","commits","payload","commit","message","date","Date","created_at","sort","a","b","slice","error","alert","Scene","component","slider","limitCommits","formattedDate","toLocaleString","month","day","year","hour","minute","hour12","join","fetchCommits","useLayoutEffect","ctx","context","panels","utils","toArray","xPercent","scrollTrigger","trigger","scrub","snap","snapTo","min","max","start","end","ScrollTrigger","create","pin","revert","src","id","registerPlugin","App","Routes","Route","path","element","Work","Projects","ReactDOM","createRoot","StrictMode","HashRouter"],"mappings":"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","file":"static/js/main.2178af2c.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { useRef, useEffect } from 'react';\r\nimport { gsap } from 'gsap';\r\nimport './Loading.css';\r\n\r\nconst LoadingAnimation = () => {\r\n    const nameRef = useRef(null);\r\n    const GsvgRef = useRef(null);\r\n    const tl = gsap.timeline({ repeat: -1, ease: \"linear\" });\r\n    const YsvgRef = useRef(null);\r\n    const t2 = gsap.timeline({ repeat: -1, ease: \"linear\" });\r\n\r\n    useEffect(() => {\r\n        gsap.fromTo(nameRef.current, { opacity: 0 }, { opacity: 1, duration: 2 });\r\n\r\n        tl.fromTo(GsvgRef.current, \r\n            { rotation: 0 }, \r\n            { rotation: 360, duration: 2 }\r\n        )\r\n        .fromTo(GsvgRef.current, \r\n                { y: 0 }, \r\n                { y: -1000, duration: 2 }\r\n        );\r\n\r\n        t2.fromTo(YsvgRef.current,\r\n            { rotation: 0 },\r\n            { rotation: 360, duration: 2 }\r\n        )\r\n        .fromTo(YsvgRef.current,\r\n            { y: 0 },\r\n            { y: 1000, duration: 2 }\r\n        );\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"loader-container gradient\">\r\n            <div className=\"loader\">\r\n                <div className=\"svg-wrapper\">\r\n                    <div className=\"svg-container\" ref={YsvgRef}>\r\n                        <svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <line x1=\"10\" y1=\"10\" x2=\"50\" y2=\"50\" stroke=\"black\" stroke-width=\"5\"/>\r\n                            <line x1=\"90\" y1=\"10\" x2=\"50\" y2=\"50\" stroke=\"black\" stroke-width=\"5\"/>\r\n                            <line x1=\"50\" y1=\"50\" x2=\"50\" y2=\"90\" stroke=\"black\" stroke-width=\"5\"/>\r\n                        </svg>\r\n                    </div>\r\n                    <div className=\"svg-container\" ref={GsvgRef}>\r\n                        <svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"5\" fill=\"none\"/>\r\n                            <line x1=\"50\" y1=\"50\" x2=\"80\" y2=\"50\" stroke=\"black\" stroke-width=\"5\"/>\r\n                            <line x1=\"80\" y1=\"50\" x2=\"80\" y2=\"80\" stroke=\"black\" stroke-width=\"5\"/>\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingAnimation;","import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n  useEffect(() => {\r\n    const navbar = document.querySelector('.navbar');\r\n    const navbar_container = document.querySelector('.navbar-container');\r\n    let isFadedOut = false;\r\n    let interval;\r\n    \r\n    const yesClick = () => {\r\n      if (navbar) {\r\n        navbar_container.classList.remove('no-click');\r\n      }\r\n    }\r\n\r\n    const noClick = () => {\r\n      if (navbar) {\r\n        navbar_container.classList.add('no-click');\r\n        setTimeout(yesClick, 1000);\r\n      }\r\n    }\r\n\r\n    const fadeOut = () => {\r\n      if (navbar) {\r\n        navbar.classList.add('fade-out');\r\n        isFadedOut = true;\r\n      }\r\n    };\r\n\r\n    const fadeIn = () => {\r\n      if (navbar) {\r\n        navbar.classList.remove('fade-out');\r\n        isFadedOut = false;\r\n        clearInterval(interval); // Clear the fadeOut interval when hovered\r\n        interval = setInterval(fadeOut, 2000); // Restart the interval\r\n      }\r\n    };\r\n\r\n    interval = setInterval(fadeOut, 2000); // Initial fade-out after 3 seconds\r\n\r\n    if (navbar) {\r\n      navbar.addEventListener('mouseover', fadeIn);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(interval); // Cleanup the interval on component unmount\r\n      if (navbar) {\r\n        navbar.removeEventListener('mouseover', fadeIn);\r\n      }\r\n    };\r\n  }, []);\r\n  return (\r\n    <div className=\"navbar-container\">\r\n        <nav className=\"navbar\">\r\n            <div className=\"navbar-links\">\r\n                <div><Link to=\"/work\">Work</Link></div>\r\n                <div><Link to=\"/projects\">Projects</Link></div>\r\n            </div>\r\n            <div className=\"navbar-logo\">\r\n                <Link to=\"/\">You Gao</Link>\r\n            </div>\r\n            <div className=\"navbar-links\">\r\n                <div><Link to=\"/about\">About Me</Link></div>\r\n                <div><a href=\"https://blog.yougao.dev/\">To Blog</a></div>\r\n            </div>\r\n        </nav>\r\n    </div>\r\n);\r\n};\r\n\r\nexport default Navbar;","import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport './Background.css';\r\n\r\nconst Background = () => {\r\n    const canvasRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        let scene, camera, renderer, model;\r\n\r\n        function init() {\r\n            // Create scene\r\n            scene = new THREE.Scene();\r\n            scene.background = new THREE.Color(0xffffff); // Set background color to white\r\n\r\n            // Create camera\r\n            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n            camera.position.set(0, 0, 4.3); // Position the camera above the scene\r\n\r\n            // Add light\r\n            const light = new THREE.DirectionalLight(0xffffff, 10); // Increased intensity to 10\r\n            light.position.set(0, 0, 1);\r\n            scene.add(light);\r\n            const ambientLight = new THREE.AmbientLight(0xffffff, 0.5); // Added ambient light\r\n            scene.add(ambientLight);\r\n\r\n            // Create renderer\r\n            renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current });\r\n            renderer.setSize(window.innerWidth / 2, window.innerHeight / 1.5);\r\n\r\n            // Add orbit controls\r\n            const controls = new OrbitControls(camera, renderer.domElement);\r\n            controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled\r\n            controls.dampingFactor = 0.25;\r\n\r\n            // Load the model\r\n            // const loader = new GLTFLoader();\r\n            // const modelPath = 'yoshi.glb'; // Adjust this path if necessary\r\n            // console.log(`Loading model from path: ${modelPath}`);\r\n            // loader.load(modelPath, (gltf) => {\r\n            //     model = gltf.scene;\r\n            //     model.scale.set(30, 30, 30); // Scale the model by a factor of 30\r\n            //     scene.add(model);\r\n            // });\r\n\r\n            // 50 Particles at each angle rotating in a sphere\r\n            const particles_x = new THREE.Group();\r\n            const particles_y = new THREE.Group();\r\n            const particles_z = new THREE.Group();\r\n\r\n            const particlesGeometry = new THREE.SphereGeometry(0.1, 32, 32);\r\n            const particlesMaterial = new THREE.PointsMaterial({ color: 0x000000, size: 0.01 });\r\n            for (let i = 0; i < 50; i++) {\r\n                const particle = new THREE.Points(particlesGeometry, particlesMaterial);\r\n                particle.position.x = Math.sin(i / 50 * Math.PI * 2) * 3;\r\n                particle.position.y = Math.cos(i / 50 * Math.PI * 2) * 2;\r\n                particle.position.z = 0;\r\n                particles_x.add(particle);\r\n            }\r\n            scene.add(particles_x);\r\n            for (let i = 0; i < 50; i++) {\r\n                const particle = new THREE.Points(particlesGeometry, particlesMaterial);\r\n                particle.position.x = Math.sin(i / 50 * Math.PI * 2) * 3;\r\n                particle.position.y = 0;\r\n                particle.position.z = Math.cos(i / 50 * Math.PI * 2) * 3;\r\n                particles_y.add(particle);\r\n            }\r\n            scene.add(particles_y);\r\n            for (let i = 0; i < 50; i++) {\r\n                const particle = new THREE.Points(particlesGeometry, particlesMaterial);\r\n                particle.position.x = 0;\r\n                particle.position.y = Math.sin(i / 50 * Math.PI * 2) * 2;\r\n                particle.position.z = Math.cos(i / 50 * Math.PI * 2) * 3;\r\n                particles_z.add(particle);\r\n            }\r\n            scene.add(particles_z);\r\n\r\n\r\n        // Animation loop\r\n        function animate() {\r\n            requestAnimationFrame(animate); // Request the next frame\r\n            controls.update(); // Update orbit controls\r\n            \r\n            // Rotate particles around the X axis\r\n            particles_x.rotation.x += 0.01;\r\n            // Rotate particles around the Y axis\r\n            particles_y.rotation.y += 0.01;\r\n            // Rotate particles around the Z axis\r\n            particles_z.rotation.z += 0.01;\r\n\r\n            renderer.render(scene, camera); // Render the scene with the camera\r\n        }\r\n            animate();\r\n        }\r\n\r\n        init();\r\n\r\n        // Cleanup on component unmount\r\n        return () => {\r\n            if (renderer) {\r\n                renderer.dispose();\r\n            }\r\n        };\r\n    }, []);\r\n\r\nreturn (\r\n    \r\n<div>\r\n    <div className=\"overlay-text\">cool text near spinny wheel</div>\r\n    <div className=\"overlay-text2\">cool text under spinny wheel</div>\r\n    <div>\r\n    <table className=\"table-container\">\r\n        <tr > \r\n            <td className=\"table-cell\" style={{ textAlign: 'right' }}>\r\n                <h1> TEST TEST TEST </h1>\r\n                <p>cool text near spinny wheel</p>\r\n            </td>\r\n            <td className=\"table-cell\">\r\n                <canvas ref={canvasRef} />\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    </div>\r\n</div>\r\n);\r\n};\r\n\r\nexport default Background;","import React, { useState, useEffect } from 'react';\r\nimport Loading from './loading/Loading';\r\nimport Navbar from './navbar/Navbar';\r\nimport Background from './background/Background';\r\nimport Particles from './particles/Particles';\r\nimport './Home.css'; \r\n\r\nfunction Home() {\r\n    const [showContent, setShowContent] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setShowContent(true);\r\n        }, 0);\r\n\r\n        return () => clearTimeout(timer);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"Home\">\r\n            {showContent ? (\r\n                <>\r\n                    <div class=\"outer\">\r\n                        <Navbar />\r\n                        <div class=\"bottom\">\r\n                        <Background />\r\n                        </div>\r\n                        <div class=\"bottom noclick\">\r\n                        </div>\r\n                    </div>\r\n\r\n                </>\r\n            ) : (\r\n                <Loading />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n  useEffect(() => {\r\n    const navbar = document.querySelector('.navbar');\r\n    const navbar_container = document.querySelector('.navbar-container');\r\n    let isFadedOut = false;\r\n    let interval;\r\n    \r\n    const yesClick = () => {\r\n      if (navbar) {\r\n        navbar_container.classList.remove('no-click');\r\n      }\r\n    }\r\n\r\n    const noClick = () => {\r\n      if (navbar) {\r\n        navbar_container.classList.add('no-click');\r\n        setTimeout(yesClick, 1000);\r\n      }\r\n    }\r\n\r\n    const fadeOut = () => {\r\n      if (navbar) {\r\n        navbar.classList.add('fade-out');\r\n        isFadedOut = true;\r\n      }\r\n    };\r\n\r\n    const fadeIn = () => {\r\n      if (navbar) {\r\n        navbar.classList.remove('fade-out');\r\n        isFadedOut = false;\r\n        clearInterval(interval); // Clear the fadeOut interval when hovered\r\n        interval = setInterval(fadeOut, 2000); // Restart the interval\r\n      }\r\n    };\r\n\r\n    interval = setInterval(fadeOut, 2000); // Initial fade-out after 3 seconds\r\n\r\n    if (navbar) {\r\n      navbar.addEventListener('mouseover', fadeIn);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(interval); // Cleanup the interval on component unmount\r\n      if (navbar) {\r\n        navbar.removeEventListener('mouseover', fadeIn);\r\n      }\r\n    };\r\n  }, []);\r\n  return (\r\n    <div className=\"navbar-container\">\r\n        <nav className=\"navbar\">\r\n            <div className=\"navbar-links\">\r\n                <div><Link to=\"/work\">Work</Link></div>\r\n                <div><Link to=\"/projects\">Projects</Link></div>\r\n            </div>\r\n            <div className=\"navbar-logo\">\r\n                <Link to=\"/\">You Gao</Link>\r\n            </div>\r\n            <div className=\"navbar-links\">\r\n                <div><Link to=\"/about\">About Me</Link></div>\r\n                <div><a href=\"https://blog.yougao.dev/\">To Blog</a></div>\r\n            </div>\r\n        </nav>\r\n    </div>\r\n);\r\n};\r\n\r\nexport default Navbar;","import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\r\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\nconst Background = () => {\r\n    const canvasRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        let scene, camera, renderer, board, controls;\r\n\r\n        function init() {\r\n            // Scene\r\n            scene = new THREE.Scene();\r\n            scene.background = new THREE.Color(0xffffff);\r\n\r\n            // Camera\r\n            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n            camera.position.set(0, 0, 10); // Zoom in on the board\r\n\r\n            // Renderer\r\n            renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current });\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n            // Board\r\n            // const geometry = new THREE.PlaneGeometry(15, 15);\r\n            // const material = new THREE.MeshStandardMaterial();\r\n            // board = new THREE.Mesh(geometry, material);\r\n            // board.rotation.x = -Math.PI / 2; // Rotate to lay flat\r\n            // scene.add(board);\r\n\r\n            // Ambient Light\r\n            const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n            scene.add(ambientLight);\r\n\r\n            // Load Font and Create Text\r\n            const loader = new FontLoader();\r\n            loader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', (font) => {\r\n                \r\n                // Line 1\r\n                const textGeometry = new TextGeometry('Hello This is My Personal Website', {\r\n                    font: font,\r\n                    size: 1,\r\n                    height: 0.2,\r\n                });\r\n                const textMaterial = new THREE.MeshStandardMaterial({ color: 0xffff00 });\r\n                const textMesh = new THREE.Mesh(textGeometry, textMaterial);\r\n                textMesh.position.set(-10, 0.1, 0); // Adjust position as needed\r\n                scene.add(textMesh);\r\n                \r\n                // Line 2\r\n                const textGeometry2 = new TextGeometry('Testing Testing 123', {\r\n                    font: font,\r\n                    size: 1,\r\n                    height: 0.2,\r\n                });\r\n                const textMaterial2 = new THREE.MeshStandardMaterial({ color: 0xffff00 });\r\n                const textMesh2 = new THREE.Mesh(textGeometry2, textMaterial2);\r\n                textMesh2.position.set(-10, -2, 0); // Adjust position as needed\r\n                scene.add(textMesh2);\r\n\r\n                // Line 3\r\n                const textGeometry3 = new TextGeometry('This is a test', {\r\n                    font: font,\r\n                    size: 1,\r\n                    height: 0.2,\r\n                });\r\n                const textMaterial3 = new THREE.MeshStandardMaterial({ color: 0xffff00 });\r\n                const textMesh3 = new THREE.Mesh(textGeometry3, textMaterial3);\r\n                textMesh3.position.set(-10, -4, 0); // Adjust position as needed\r\n                scene.add(textMesh3);\r\n\r\n            });\r\n\r\n            // Controls\r\n            controls = new OrbitControls(camera, renderer.domElement);\r\n\r\n            // Render loop\r\n            const animate = () => {\r\n                requestAnimationFrame(animate);\r\n                controls.update();\r\n                renderer.render(scene, camera);\r\n            };\r\n            animate();\r\n        };\r\n\r\n        init();\r\n\r\n        // Cleanup on component unmount\r\n        return () => {\r\n            if (renderer) {\r\n                renderer.dispose();\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    return <canvas ref={canvasRef} />;\r\n};\r\n\r\nexport default Background;","import React, { useState, useEffect } from 'react';\r\nimport Navbar from './navbar/Navbar';\r\nimport Background from './background/Background';\r\nimport './About.css';\r\nfunction About() {\r\n    return (\r\n        <div className=\"About\">\r\n            <div class=\"outer\">\r\n                <Navbar />\r\n                <div class=\"bottom\">\r\n                <Background />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;","import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n  useEffect(() => {\r\n    const navbar = document.querySelector('.navbar');\r\n    const navbar_container = document.querySelector('.navbar-container');\r\n    let isFadedOut = false;\r\n    let interval;\r\n    \r\n    const yesClick = () => {\r\n      if (navbar) {\r\n        navbar_container.classList.remove('no-click');\r\n      }\r\n    }\r\n\r\n    const noClick = () => {\r\n      if (navbar) {\r\n        navbar_container.classList.add('no-click');\r\n        setTimeout(yesClick, 1000);\r\n      }\r\n    }\r\n\r\n    const fadeOut = () => {\r\n      if (navbar) {\r\n        navbar.classList.add('fade-out');\r\n        isFadedOut = true;\r\n      }\r\n    };\r\n\r\n    const fadeIn = () => {\r\n      if (navbar) {\r\n        navbar.classList.remove('fade-out');\r\n        isFadedOut = false;\r\n        clearInterval(interval); // Clear the fadeOut interval when hovered\r\n        interval = setInterval(fadeOut, 2000); // Restart the interval\r\n      }\r\n    };\r\n\r\n    interval = setInterval(fadeOut, 2000); // Initial fade-out after 3 seconds\r\n\r\n    if (navbar) {\r\n      navbar.addEventListener('mouseover', fadeIn);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(interval); // Cleanup the interval on component unmount\r\n      if (navbar) {\r\n        navbar.removeEventListener('mouseover', fadeIn);\r\n      }\r\n    };\r\n  }, []);\r\n  return (\r\n    <div className=\"navbar-container\">\r\n        <nav className=\"navbar\">\r\n            <div className=\"navbar-links\">\r\n                <div><Link to=\"/work\">Work</Link></div>\r\n                <div><Link to=\"/projects\">Projects</Link></div>\r\n            </div>\r\n            <div className=\"navbar-logo\">\r\n                <Link to=\"/\">You Gao</Link>\r\n            </div>\r\n            <div className=\"navbar-links\">\r\n                <div><Link to=\"/about\">About Me</Link></div>\r\n                <div><a href=\"https://blog.yougao.dev/\">To Blog</a></div>\r\n            </div>\r\n        </nav>\r\n    </div>\r\n);\r\n};\r\n\r\nexport default Navbar;","import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\r\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport gsap from 'gsap';\r\n\r\nconst Background = () => {\r\n    const canvasRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        let scene, camera, renderer, model, controls;\r\n\r\n        function init() {\r\n            // ------------------------------------------------ Setup ------------------------------------------------\r\n            // Scene, Camera + Controls, Renderer\r\n            scene = new THREE.Scene();\r\n            scene.background = new THREE.Color(0xffffff);\r\n\r\n            camera = new THREE.PerspectiveCamera(1000, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n            camera.position.set(0, 25, 130); // Zoom in on the board\r\n\r\n            renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current });\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n            controls = new OrbitControls(camera, renderer.domElement);\r\n            controls.target.set(0, 25, 80);\r\n            controls.enableRotate = true;\r\n            controls.enablePan = false;\r\n            controls.enableZoom = false;\r\n\r\n            const fontLoader = new FontLoader();\r\n            const textureLoader = new THREE.TextureLoader();\r\n            const loader = new GLTFLoader();\r\n\r\n            // Light\r\n            const ambientLight = new THREE.AmbientLight(0xffffff, 0.1);\r\n            scene.add(ambientLight);\r\n\r\n            // ------------------------------------------------ House ------------------------------------------------\r\n\r\n\r\n            // Floor\r\n            const woodTexture = textureLoader.load('wood.jpg');\r\n            woodTexture.wrapS = THREE.RepeatWrapping;\r\n            woodTexture.wrapT = THREE.RepeatWrapping;\r\n            woodTexture.repeat.set(1, 15); // Adjust the repeat values as needed\r\n            const planeGeometry = new THREE.PlaneGeometry(200, 1000);\r\n            const planeMaterial = new THREE.MeshBasicMaterial({ map: woodTexture, side: THREE.DoubleSide});\r\n            const plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n            plane.position.set(0, 65, -300);\r\n            plane.rotation.x = -Math.PI / 2;\r\n            scene.add(plane);\r\n\r\n            // Right Wall\r\n            const wallTexture = textureLoader.load('office.jpg');\r\n            wallTexture.wrapS = THREE.RepeatWrapping;\r\n            wallTexture.wrapT = THREE.RepeatWrapping;\r\n            wallTexture.repeat.set(1, 10); // Adjust the repeat values as needed\r\n            const leftWallGeometry = new THREE.PlaneGeometry(1000, 120);\r\n            const leftWallMaterial = new THREE.MeshBasicMaterial({ map: wallTexture, side: THREE.DoubleSide });\r\n            const leftWall = new THREE.Mesh(leftWallGeometry, leftWallMaterial);\r\n            leftWall.position.set(-100, 10, -300);\r\n            leftWall.rotation.y = Math.PI / 2;\r\n            scene.add(leftWall);\r\n\r\n            // Left Wall\r\n            const rightWallGeometry = new THREE.PlaneGeometry(1000, 120);\r\n            const rightWallMaterial = new THREE.MeshBasicMaterial({ map: wallTexture, side: THREE.DoubleSide });\r\n            const rightWall = new THREE.Mesh(rightWallGeometry, rightWallMaterial);\r\n            rightWall.position.set(100, 10, -300);\r\n            rightWall.rotation.y = Math.PI / 2;\r\n            scene.add(rightWall);\r\n\r\n            // Back Wall\r\n            const backWallGeometry = new THREE.PlaneGeometry(200, 120);\r\n            const backWallMaterial = new THREE.MeshBasicMaterial({ map: wallTexture, side: THREE.DoubleSide });\r\n            const backWall = new THREE.Mesh(backWallGeometry, backWallMaterial);\r\n            backWall.position.set(0, 10, 200);\r\n            backWall.rotation.y = Math.PI;\r\n            scene.add(backWall);\r\n\r\n\r\n            // Ceiling\r\n            const ceilingGeometry = new THREE.PlaneGeometry(200, 1200);\r\n            const ceilingMaterial = new THREE.MeshBasicMaterial({ color: 0xFA9C21, side: THREE.DoubleSide });\r\n            const ceiling = new THREE.Mesh(ceilingGeometry, ceilingMaterial);\r\n            ceiling.position.set(0, -50, -300);\r\n            ceiling.rotation.x = Math.PI / 2;\r\n            scene.add(ceiling);\r\n\r\n            // ------------------------------------------------ Rooms ------------------------------------------------\r\n\r\n            function createWalls(numWalls) {\r\n                for (let i = 0; i < numWalls; i++) {\r\n                    // const doorwallTexture = textureLoader.load('wall.jpg');\r\n                    // doorwallTexture.wrapS = THREE.RepeatWrapping;\r\n                    // doorwallTexture.wrapT = THREE.RepeatWrapping;\r\n                    // doorwallTexture.repeat.set(1, 10); // Adjust the repeat values as needed\r\n\r\n                    // Left Door Wall\r\n                    const leftDoorWallGeometry = new THREE.PlaneGeometry(70, 85);\r\n                    const leftDoorWallMaterial = new THREE.MeshBasicMaterial({ color: 0xADD8E6, side: THREE.DoubleSide });\r\n                    const leftDoorWall = new THREE.Mesh(leftDoorWallGeometry, leftDoorWallMaterial);\r\n                    leftDoorWall.position.set(55, 30, 0 + i * -200);\r\n                    leftDoorWall.rotation.z = Math.PI / 2;\r\n                    scene.add(leftDoorWall);\r\n            \r\n                    // Right Door Wall\r\n                    const rightDoorWallGeometry = new THREE.PlaneGeometry(70, 85);\r\n                    const rightDoorWallMaterial = new THREE.MeshBasicMaterial({ color: 0xADD8E6, side: THREE.DoubleSide });\r\n                    const rightDoorWall = new THREE.Mesh(rightDoorWallGeometry, rightDoorWallMaterial);\r\n                    rightDoorWall.position.set(-55, 30, 0 + i * -200);\r\n                    rightDoorWall.rotation.z = Math.PI / 2;\r\n                    scene.add(rightDoorWall);\r\n                    \r\n                    // Middle Wall\r\n                    const middleWallGeometry = new THREE.PlaneGeometry(47, 195);\r\n                    const middleWallMaterial = new THREE.MeshBasicMaterial({ color: 0xADD8E6, side: THREE.DoubleSide });\r\n                    const middleWall = new THREE.Mesh(middleWallGeometry, middleWallMaterial);\r\n                    middleWall.position.set(0, -25, 0 + i * -200);\r\n                    middleWall.rotation.z = Math.PI / 2;\r\n                    scene.add(middleWall);\r\n\r\n\r\n                }\r\n            }\r\n            \r\n            function createDoors(numDoors) {\r\n                for (let i = 0; i < numDoors; i++) {\r\n                    // Load Model\r\n                    const modelPath_e = 'door.glb'; // Adjust this path if necessary\r\n                    console.log(`Loading model from path: ${modelPath_e}`);\r\n                    loader.load(modelPath_e, (gltf) => {\r\n                        model = gltf.scene;\r\n                        model.scale.set(30, 30, 30); // Scale the model by a factor of 30\r\n                        model.position.set(0, 0, 0 + i * -200); // Set the position of the model\r\n                        scene.add(model);\r\n                    });\r\n                }\r\n            }\r\n\r\n            createWalls(4);\r\n            createDoors(4);\r\n\r\n            // --- Test --- \r\n            const posters = [];\r\n            const testPoser = new THREE.BoxGeometry(50, 50, 50);\r\n            const testMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 });\r\n            const test = new THREE.Mesh(testPoser, testMaterial);\r\n            test.position.set(0, 0, 0);\r\n            scene.add(test);\r\n            const camera_position = { x: 0, y: 0, z: 70 }\r\n            const controls_target = { x: 0, y: 10, z: 0 }\r\n            posters.push({ mesh: test, target: camera_position, controls: controls_target });\r\n\r\n            // --- Room 1 ---\r\n\r\n            // Text\r\n            fontLoader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', (font) => {\r\n            const textGeometry = new TextGeometry('Tessera Therapeutics', {\r\n                font: font,\r\n                size: 10,\r\n                height: 1,\r\n                curveSegments: 12,\r\n                bevelEnabled: false\r\n            });\r\n            const textMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 });\r\n            const text = new THREE.Mesh(textGeometry, textMaterial);\r\n            text.position.set(-100, -30, -155);\r\n            text.rotation.x = Math.PI;\r\n            text.rotation.y = Math.PI / 2;\r\n            scene.add(text);\r\n\r\n            const textGeometry2 = new TextGeometry('Biomanufacturing Intern', {\r\n                font: font,\r\n                size: 10,\r\n                height: 1,\r\n                curveSegments: 12,\r\n                bevelEnabled: false\r\n            });\r\n            const textMaterial2 = new THREE.MeshBasicMaterial({ color: 0x000000 });\r\n            const text2 = new THREE.Mesh(textGeometry2, textMaterial2);\r\n            text2.position.set(-100, -15, -155);\r\n            text2.rotation.x = Math.PI;\r\n            text2.rotation.y = Math.PI / 2;\r\n            scene.add(text2);\r\n            });\r\n\r\n            // Logo\r\n            const texturePath = 'tessera.png'; // Adjust this path if necessary\r\n            textureLoader.load(texturePath, (texture) => {\r\n                const boxGeometry = new THREE.BoxGeometry(5, 25, 25);\r\n                const boxMaterial = new THREE.MeshBasicMaterial({ map: texture });\r\n                const box = new THREE.Mesh(boxGeometry, boxMaterial);\r\n                box.position.set(-100, -27, -175); // Adjust the position as needed\r\n                scene.add(box);\r\n            });\r\n\r\n            // // Deliverables\r\n            // const delivarablePath = \"biomanufacturing.png\"; // Adjust this path if necessary\r\n            // textureLoader.load(delivarablePath, (texture) => {\r\n            //     const boxGeometry = new THREE.BoxGeometry(175, 60, 5);\r\n            //     const boxMaterial = new THREE.MeshBasicMaterial({ map: texture });\r\n            //     const box = new THREE.Mesh(boxGeometry, boxMaterial);\r\n            //     box.rotation.y = -Math.PI / 2;\r\n            //     box.rotation.z = Math.PI;\r\n            //     box.position.set(-100, 25, -100); // Adjust the position as needed\r\n            //     scene.add(box);\r\n            // });\r\n\r\n            // Desk Placeholder\r\n            const deskGeometry = new THREE.BoxGeometry(150, 25, 25);\r\n            const deskMaterial = new THREE.MeshBasicMaterial({ color: 0x8B4513 });\r\n            const desk = new THREE.Mesh(deskGeometry, deskMaterial);\r\n            desk.position.set(-80, 50, -100); // Adjust the position as needed\r\n            desk.rotation.y = Math.PI / 2;\r\n            scene.add(desk);\r\n\r\n\r\n            // --- Room 2 ---\r\n\r\n            // Text\r\n            fontLoader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', (font) => {\r\n                const textGeometry = new TextGeometry('Fallahi-Sichani Lab', {\r\n                    font: font,\r\n                    size: 10,\r\n                    height: 1,\r\n                    curveSegments: 12,\r\n                    bevelEnabled: false\r\n                });\r\n                const textMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 });\r\n                const text = new THREE.Mesh(textGeometry, textMaterial);\r\n                text.position.set(-100, -30, -355);\r\n                text.rotation.x = Math.PI;\r\n                text.rotation.y = Math.PI / 2;\r\n                scene.add(text);\r\n\r\n                const textGeometry2 = new TextGeometry('BME Research Assistant', {\r\n                    font: font,\r\n                    size: 10,\r\n                    height: 1,\r\n                    curveSegments: 12,\r\n                    bevelEnabled: false\r\n                });\r\n                const textMaterial2 = new THREE.MeshBasicMaterial({ color: 0x000000 });\r\n                const text2 = new THREE.Mesh(textGeometry2, textMaterial2);\r\n                text2.position.set(-100, -15, -355);\r\n                text2.rotation.x = Math.PI;\r\n                text2.rotation.y = Math.PI / 2;\r\n                scene.add(text2);\r\n            });\r\n\r\n            // Logo\r\n            const texturePath1 = 'uva_bme.jpg'; // Adjust this path if necessary\r\n            textureLoader.load(texturePath1, (texture) => {\r\n                const boxGeometry = new THREE.BoxGeometry(25, 25, 25);\r\n                const boxMaterial = new THREE.MeshBasicMaterial({ map: texture });\r\n                const box = new THREE.Mesh(boxGeometry, boxMaterial);\r\n                // flip the logo\r\n                box.rotation.z = Math.PI;\r\n                box.position.set(-110, -27, -375); // Adjust the position as needed\r\n                scene.add(box);\r\n            });\r\n\r\n            // Desk Placeholder\r\n            const deskGeometry1 = new THREE.BoxGeometry(150, 25, 25);\r\n            const deskMaterial1 = new THREE.MeshBasicMaterial({ color: 0x8B4513 });\r\n            const desk1 = new THREE.Mesh(deskGeometry1, deskMaterial1);\r\n            desk1.position.set(-80, 50, -300); // Adjust the position as needed\r\n            desk1.rotation.y = Math.PI / 2;\r\n            scene.add(desk1);\r\n\r\n            // --- Room 3 ---\r\n\r\n            // Text\r\n            fontLoader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', (font) => {\r\n                const textGeometry = new TextGeometry('Kinsale Insurance', {\r\n                    font: font,\r\n                    size: 10,\r\n                    height: 1,\r\n                    curveSegments: 12,\r\n                    bevelEnabled: false\r\n                });\r\n                const textMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 });\r\n                const text = new THREE.Mesh(textGeometry, textMaterial);\r\n                text.position.set(-100, -30, -555);\r\n                text.rotation.x = Math.PI;\r\n                text.rotation.y = Math.PI / 2;\r\n                scene.add(text);\r\n\r\n                const textGeometry2 = new TextGeometry('Summer DevOps Intern', {\r\n                    font: font,\r\n                    size: 10,\r\n                    height: 1,\r\n                    curveSegments: 12,\r\n                    bevelEnabled: false\r\n                });\r\n                const textMaterial2 = new THREE.MeshBasicMaterial({ color: 0x000000 });\r\n                const text2 = new THREE.Mesh(textGeometry2, textMaterial2);\r\n                text2.position.set(-100, -15, -555);\r\n                text2.rotation.x = Math.PI;\r\n                text2.rotation.y = Math.PI / 2;\r\n                scene.add(text2);\r\n            });\r\n\r\n            // Logo\r\n            const texturePath3 = 'kinsale.png'; // Adjust this path if necessary\r\n            textureLoader.load(texturePath3, (texture) => {\r\n                const boxGeometry = new THREE.BoxGeometry(25, 25, 25);\r\n                const boxMaterial = new THREE.MeshBasicMaterial({ map: texture });\r\n                const box = new THREE.Mesh(boxGeometry, boxMaterial);\r\n                box.position.set(-110, -27, -575); // Adjust the position as needed\r\n                scene.add(box);\r\n            });\r\n\r\n            // Desk Placeholder\r\n            const deskGeometry2 = new THREE.BoxGeometry(150, 25, 25);\r\n            const deskMaterial2 = new THREE.MeshBasicMaterial({ color: 0x8B4513 });\r\n            const desk2 = new THREE.Mesh(deskGeometry2, deskMaterial2);\r\n            desk2.position.set(-80, 50, -500); // Adjust the position as needed\r\n            desk2.rotation.y = Math.PI / 2;\r\n            scene.add(desk2);\r\n\r\n            // ----- Room 4 -----\r\n\r\n\r\n            // --------------------------------------------------- Movement ---------------------------------------------------\r\n            // Array of circle data\r\n            const circlesData = [\r\n                { color: 0xffff00, position: { x: 0, y: 50, z: -10 }, target: { x: 20, y: 25, z: -100, targetX: -10, targetY: 25, targetZ: -100 } },\r\n                { color: 0xff0000, position: { x: 0, y: 50, z: -200 }, target: { x: 20, y: 25, z: -300, targetX: -10, targetY: 25, targetZ: -300 } },\r\n                { color: 0x00ff00, position: { x: 0, y: 50, z: -400 }, target: { x: 20, y: 25, z: -500, targetX: -10, targetY: 25, targetZ: -500 } }\r\n            ];\r\n\r\n            // Create circles and add to the scene\r\n            const circles = [];\r\n            circlesData.forEach(data => {\r\n                const circleGeometry = new THREE.CircleGeometry(5, 32);\r\n                const circleMaterial = new THREE.MeshBasicMaterial({ color: data.color, side: THREE.DoubleSide });\r\n                const circle = new THREE.Mesh(circleGeometry, circleMaterial);\r\n                circle.position.set(data.position.x, data.position.y, data.position.z);\r\n                scene.add(circle);\r\n                circles.push({ mesh: circle, target: data.target });\r\n            });\r\n\r\n            // Raycaster for detecting clicks\r\n            const raycaster = new THREE.Raycaster();\r\n            const mouse = new THREE.Vector2();\r\n\r\n            // Add event listener for click\r\n            renderer.domElement.addEventListener('click', (event) => {\r\n                // Calculate mouse position in normalized device coordinates\r\n                mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n                mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n\r\n                // Update the raycaster with the camera and mouse position\r\n                raycaster.setFromCamera(mouse, camera);\r\n\r\n                // Calculate objects intersecting the ray\r\n                const intersectCircles = raycaster.intersectObjects(circles.map(c => c.mesh));\r\n                const intersectPosters = raycaster.intersectObjects(posters.map(p => p.mesh));\r\n\r\n                if (intersectCircles.length > 0) {\r\n                    const intersectedCircle = circles.find(c => c.mesh === intersectCircles[0].object);\r\n                    if (intersectedCircle) {\r\n                        console.log('Circle clicked!');\r\n                        // Change camera position\r\n                        gsap.to(camera.position, { duration: 1, x: intersectedCircle.target.x, y: intersectedCircle.target.y, z: intersectedCircle.target.z });\r\n                        // Change orbital target\r\n                        controls.target.set(intersectedCircle.target.targetX, intersectedCircle.target.targetY, intersectedCircle.target.targetZ);\r\n                        controls.update();\r\n                    }\r\n                }\r\n                if (intersectPosters.length > 0) {\r\n                    const intersectedPoster = posters.find(p => p.mesh === intersectPosters[0].object);    \r\n                    if (intersectedPoster) {\r\n                        console.log('Poster clicked!');\r\n                        // Change camera position\r\n                        gsap.to(camera.position, { duration: 1, x: intersectedPoster.target.x, y: intersectedPoster.target.y, z: intersectedPoster.target.z });\r\n                        // Change orbital target\r\n                        controls.target.set(intersectedPoster.controls.x, intersectedPoster.controls.y, intersectedPoster.controls.z);\r\n                        controls.enableRotate = false;\r\n                        const square = document.createElement('div');\r\n                        square.style.position = 'absolute';\r\n                        square.style.top = '100px';\r\n                        square.style.left = '100px';\r\n                        square.style.width = '50px';\r\n                        square.style.height = '50px';\r\n                        square.style.backgroundColor = 'red';\r\n                        square.onclick = () => {\r\n                            console.log('Square clicked!');\r\n                            controls.enableRotate = true;\r\n                            document.body.removeChild(square);\r\n                            camera.position.set(0, 25, 130);\r\n                            controls.target.set(0, 25, 80);\r\n                            controls.update();\r\n                        };\r\n                        document.body.appendChild(square);\r\n                        controls.update();\r\n                    }          \r\n                }\r\n            });\r\n\r\n            // Function to move camera on arrow keys\r\n            let isAnimating = false;\r\n\r\n            function moveCamera(event) {\r\n                if (isAnimating) return;\r\n            \r\n                isAnimating = true;\r\n                const currentCameraPosition = camera.position;\r\n                const currentTargetPosition = controls.target;\r\n                const speed = 50;\r\n            \r\n                const onComplete = () => {\r\n                    isAnimating = false;\r\n                };\r\n            \r\n                switch (event.key) {\r\n                    case 'ArrowUp':\r\n                        gsap.to(currentCameraPosition, { duration: .5, x: 0, y: 25, z: currentCameraPosition.z - speed, onComplete });\r\n                        controls.target.set(0, 25, currentTargetPosition.z - speed);\r\n                        controls.update();\r\n                        break;\r\n                    case 'ArrowDown':\r\n                        gsap.to(currentCameraPosition, { duration: .5, x: 0, y: 25, z: currentCameraPosition.z + speed, onComplete });\r\n                        controls.target.set(0, 25, currentTargetPosition.z + speed);\r\n                        controls.update();\r\n                        break;\r\n                    // Add cases for ArrowLeft and ArrowRight if needed\r\n                }\r\n            }\r\n\r\n            // Add event listener for arrow keys\r\n            window.addEventListener('keydown', moveCamera);\r\n\r\n            // Function to handle window resize\r\n            function onWindowResize() {\r\n                // Update camera aspect ratio and projection matrix\r\n                camera.aspect = window.innerWidth / window.innerHeight;\r\n                camera.updateProjectionMatrix();\r\n\r\n                // Update renderer size\r\n                renderer.setSize(window.innerWidth, window.innerHeight);\r\n            }\r\n\r\n            // Add event listener for window resize\r\n            window.addEventListener('resize', onWindowResize, false);\r\n\r\n            const animate = () => {\r\n                requestAnimationFrame(animate);\r\n                controls.update();\r\n                renderer.render(scene, camera);\r\n            };\r\n            animate();\r\n            }\r\n\r\n\r\n\r\n        init();\r\n\r\n        // Cleanup on component unmount\r\n        return () => {\r\n            if (renderer) {\r\n                renderer.dispose();\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    return <canvas ref={canvasRef} />;\r\n};\r\n\r\nexport default Background;","import React, { useState, useEffect } from 'react';\r\nimport Navbar from './navbar/Navbar';\r\nimport Background from './background/Background';\r\nimport './Work.css';\r\nfunction About() {\r\n    return (\r\n        <div className=\"About\">\r\n            <div class=\"outer\">\r\n                <Navbar />\r\n                <div class=\"bottom\">\r\n                <Background />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;","import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n  useEffect(() => {\r\n    const navbar = document.querySelector('.navbar');\r\n    const navbar_container = document.querySelector('.navbar-container');\r\n    let isFadedOut = false;\r\n    let interval;\r\n    \r\n    const yesClick = () => {\r\n      if (navbar) {\r\n        navbar_container.classList.remove('no-click');\r\n      }\r\n    }\r\n\r\n    const noClick = () => {\r\n      if (navbar) {\r\n        navbar_container.classList.add('no-click');\r\n        setTimeout(yesClick, 1000);\r\n      }\r\n    }\r\n\r\n    const fadeOut = () => {\r\n      if (navbar) {\r\n        navbar.classList.add('fade-out');\r\n        isFadedOut = true;\r\n      }\r\n    };\r\n\r\n    const fadeIn = () => {\r\n      if (navbar) {\r\n        navbar.classList.remove('fade-out');\r\n        isFadedOut = false;\r\n        clearInterval(interval); // Clear the fadeOut interval when hovered\r\n        interval = setInterval(fadeOut, 2000); // Restart the interval\r\n      }\r\n    };\r\n\r\n    interval = setInterval(fadeOut, 2000); // Initial fade-out after 3 seconds\r\n\r\n    if (navbar) {\r\n      navbar.addEventListener('mouseover', fadeIn);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(interval); // Cleanup the interval on component unmount\r\n      if (navbar) {\r\n        navbar.removeEventListener('mouseover', fadeIn);\r\n      }\r\n    };\r\n  }, []);\r\n  return (\r\n    <div className=\"navbar-container\">\r\n        <nav className=\"navbar\">\r\n            <div className=\"navbar-links\">\r\n                <div><Link to=\"/work\">Work</Link></div>\r\n                <div><Link to=\"/projects\">Projects</Link></div>\r\n            </div>\r\n            <div className=\"navbar-logo\">\r\n                <Link to=\"/\">You Gao</Link>\r\n            </div>\r\n            <div className=\"navbar-links\">\r\n                <div><Link to=\"/about\">About Me</Link></div>\r\n                <div><a href=\"https://blog.yougao.dev/\">To Blog</a></div>\r\n            </div>\r\n        </nav>\r\n    </div>\r\n);\r\n};\r\n\r\nexport default Navbar;","export async function getRecentCommits(username) {\r\n    const commitList = document.getElementById('commit-list');\r\n    commitList.innerHTML = ''; // Clear any existing commits\r\n    console.log('Fetching commits for', username);\r\n    if (!username) {\r\n        alert('Please enter a GitHub username.');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        // Get the user's repositories\r\n        const reposResponse = await fetch(`https://api.github.com/users/${username}/events`);\r\n        const events = await reposResponse.json();\r\n    \r\n        if (events.length === 0) {\r\n            commitList.innerHTML = '<li>No repositories found for this user.</li>';\r\n            return;\r\n        }\r\n    \r\n        // Variable to store all commits\r\n        let allCommits = [];\r\n    \r\n        // Iterate over events to get recent commits\r\n        for (const event of events) {\r\n            if (event.type !== 'PushEvent') {\r\n                continue;\r\n            }\r\n\r\n            // Get the repo\r\n            const repo = event.repo;\r\n            const repoName = repo.name;\r\n\r\n            // Get the Paylod\r\n            const payload = event.payload;\r\n            \r\n            // payload.commits is an array of commits \r\n            const commits = payload.commits;\r\n\r\n            // Add the commits to the allCommits array\r\n            allCommits = allCommits.concat(commits.map(commit => ({\r\n                repoName: repoName,\r\n                message: commit.message,\r\n                date: new Date(event.created_at)\r\n            })));\r\n        }\r\n    \r\n        // Sort the commits by date in descending order\r\n        allCommits.sort((a, b) => b.date - a.date);\r\n    \r\n        // Append the most recent 10 commits to the commitList\r\n        return allCommits.slice(0, 10);\r\n    } catch (error) {\r\n        console.error('Error fetching commits:', error);\r\n        commitList.innerHTML = '<li>Error fetching commits. Please try again later.</li>';\r\n    }\r\n}\r\n\r\nexport async function setCommits() {\r\n    const username = 'You-Gao';\r\n    const commitList = await getRecentCommits(username);\r\n    console.log('Commits:', commitList);\r\n    if (commitList) {\r\n        const commitListElement = document.getElementById('commit-list');\r\n        commitListElement.innerHTML = commitList.map(commit => {\r\n            const options = { \r\n                month: '2-digit', \r\n                day: '2-digit', \r\n                year: 'numeric', \r\n                hour: '2-digit', \r\n                minute: '2-digit', \r\n                hour12: true \r\n            };\r\n            const formattedDate = new Date(commit.date).toLocaleString('en-US', options);\r\n            return `<li>${commit.repoName}: ${commit.message}</li>`;\r\n        }).join('');\r\n    }\r\n}","import gsap from \"gsap\";\r\nimport ScrollTrigger from \"gsap/ScrollTrigger\";\r\nimport { useLayoutEffect, useRef, useEffect } from \"react\";\r\nimport \"./Background.css\";\r\nimport React from \"react\";\r\nimport { getRecentCommits } from \"./recent_commits\";\r\ngsap.registerPlugin(ScrollTrigger);\r\n\r\nexport default function Scene() {\r\n  const component = useRef();\r\n  const slider = useRef();\r\n  \r\n  useEffect(() => {\r\n    const username = 'You-Gao';\r\n    const fetchCommits = async () => {\r\n        try {\r\n            const commitList = await getRecentCommits(username);\r\n            const limitCommits = commitList.slice(0, 10);\r\n            console.log('Commits:', commitList);\r\n            if (limitCommits) {\r\n                const commitListElement = document.getElementById('commit-list');\r\n                commitListElement.innerHTML = limitCommits.map(commit => {\r\n                  const options = { \r\n                    month: '2-digit', \r\n                    day: '2-digit', \r\n                    year: 'numeric', \r\n                    hour: '2-digit', \r\n                    minute: '2-digit', \r\n                    hour12: true \r\n                };\r\n                const formattedDate = new Date(commit.date).toLocaleString('en-US', options);\r\n                    return `<li>${commit.repoName}: ${commit.message} (${formattedDate})</li>`;\r\n                }).join('');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching commits:', error);\r\n        }\r\n    };\r\n\r\n    fetchCommits();\r\n}, []);\r\n\r\n\r\n  useLayoutEffect(() => {\r\n    let ctx = gsap.context(() => {\r\n      const pixelsPause = 300;\r\n      let panels = gsap.utils.toArray(\".panel\");\r\n      gsap.to(panels, {\r\n        xPercent: -100 * (panels.length - 1),\r\n        ease: \"none\",\r\n        scrollTrigger: {\r\n          trigger: slider.current,\r\n          scrub: 1,\r\n          snap: {\r\n            snapTo: 1 / (panels.length - 1),\r\n            duration: { min: 0.1, max: 0.5 }, // Adjust duration for less snappy effect\r\n            ease: \"power3.inOut\" // Adjust easing for smoother snapping\r\n          },\r\n          start: `top+=${pixelsPause} top`,\r\n          end: () => \"+=\" + window.innerWidth * panels.length,\r\n        },\r\n      });\r\n      ScrollTrigger.create({\r\n        trigger: slider.current,\r\n        end: () => \"+=\" + (window.innerWidth * panels.length + pixelsPause),\r\n        pin: true,\r\n      });\r\n    }, component);\r\n    return () => ctx.revert();\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\" ref={component}>\r\n      <div ref={slider} className=\"container\">\r\n        <div className=\"description panel\">\r\n              <div className=\"project-container\">\r\n                <h1>Personal Website v1</h1>\r\n                <h2>React, HTML/CSS/JS, Three.js, GSAP</h2>\r\n                <p className=\"\">My current website. First attempt with React, Three.js, and GSAP.</p>\r\n                <img src=\"/blog.png\"/>\r\n              </div>\r\n          </div>\r\n        <div className=\"description panel\">\r\n            <div className=\"project-container\">\r\n              <h1>Personal Blog</h1>\r\n              <h2>Jekyll, HTML/CSS/JS</h2>\r\n              <p className=\"\">My personal blog where I share my thoughts and experiences on various topics.</p>\r\n              <img src=\"/blog.png\"/>\r\n            </div>\r\n        </div>\r\n        <div className=\"panel\">\r\n            <div className=\"project-container\">\r\n                <h1>UVA Event Oracle</h1>\r\n                <h2>Web-Scraping, Python, Vertex AI</h2>\r\n                <p className=\"\">A static page that displays events happening at UVA after ETL.</p>\r\n                <img src=\"/uva-event-oracle.png\"/>\r\n            </div>\r\n        </div>\r\n        <div className=\"panel\">\r\n            <div className=\"project-container\">\r\n                <h1>UVA Elective Oracle</h1>\r\n                <h2>APIs, Python, HTML/CSS/JS</h2>\r\n                <p className=\"\">A web application for interacting w/ interesting electives at UVA</p>\r\n                <img src=\"/uva-elective-oracle.png\"/>\r\n            </div>\r\n        </div>\r\n        <div className=\"panel\">\r\n            <div className=\"project-container\">\r\n                <h1>Kaggle Archive</h1>\r\n                <h2>Jupyter, Pandas, Scikit-learn, Matplotlib</h2>\r\n                <p className=\"\">An archive of my data-science projects from classes and Kaggle</p>\r\n                <img src=\"/kaggle.png\"/>\r\n            </div>\r\n        </div>\r\n        <div className=\"panel\">\r\n            <div className=\"project-container\">\r\n            <h1><a href=\"https://github.com/You-Gao/\" target=\"_blank\">Check My GitHub to Stay Updated!</a></h1>\r\n            <br/>\r\n            <br/>\r\n            <h2 className=\"margin-top\" >What I'm Up To (My Recent Commits):</h2>\r\n            <ul id=\"commit-list\"></ul>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport Navbar from './navbar/Navbar';\r\nimport Background from './background/Background';\r\nimport './Projects.css';\r\nfunction About() {\r\n    return (\r\n        <div className=\"About\">\r\n            <Navbar />\r\n            <Background />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;","import React, { useState, useEffect } from 'react';\r\nimport { HashRouter, Route, Routes } from 'react-router-dom';\r\nimport Home from './home/Home';\r\nimport About from './about/About';\r\nimport Work from './work/Work';\r\nimport Projects from './projects/Projects';\r\nimport './App.css'; \r\n\r\nfunction App() {\r\n    return (\r\n        <Routes>\r\n            <Route path=\"/\" element={<Home />} />\r\n            <Route path=\"/about\" element={<About />} />\r\n            <Route path=\"/work\" element={<Work />} />\r\n            <Route path=\"/projects\" element={<Projects />} />\r\n        </Routes>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './App';\r\nimport { HashRouter } from \"react-router-dom\";\r\n\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}