{"version":3,"sources":["reportWebVitals.js","navbar/Navbar.js","background/Background.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","Navbar","Background","useEffect","scene","camera","renderer","model","animate","requestAnimationFrame","rotation","y","render","handleResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","addEventListener","THREE","background","position","set","lookAt","light","add","document","body","appendChild","domElement","loader","GLTFLoader","console","log","concat","load","gltf","scale","undefined","error","init","removeEventListener","removeChild","App","isLoading","setIsLoading","useState","timer","setTimeout","clearTimeout","React","createElement","className","ReactDOM","createRoot","getElementById","StrictMode"],"mappings":"4QAYeA,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,M,iBCkDCS,I,cCoBAC,MAzEIA,KACfC,oBAAU,KACN,IAAIC,EAAOC,EAAQC,EAAUC,EAsC7B,SAASC,IACLC,sBAAsBD,GAGlBD,IACAA,EAAMG,SAASC,GAAK,KAGxBL,EAASM,OAAOR,EAAOC,GAI3B,MAAMQ,EAAeA,KACjBR,EAAOS,OAASC,OAAOC,WAAaD,OAAOE,YAC3CZ,EAAOa,yBACPZ,EAASa,QAAQJ,OAAOC,WAAYD,OAAOE,cAS/C,OANAF,OAAOK,iBAAiB,SAAUP,GAtDlC,WAEIT,EAAQ,IAAIiB,KACZjB,EAAMkB,WAAa,IAAID,IAAY,UAEnChB,EAAS,IAAIgB,IAAwB,GAAIN,OAAOC,WAAaD,OAAOE,YAAa,GAAK,KACtFZ,EAAOkB,SAASC,IAAI,EAAG,GAAI,GAC3BnB,EAAOoB,OAAO,EAAG,EAAG,GAGpB,MAAMC,EAAQ,IAAIL,IAAuB,SAAU,IACnDK,EAAMH,SAASC,IAAI,EAAG,EAAG,GACzBpB,EAAMuB,IAAID,GAGVpB,EAAW,IAAIe,KACff,EAASa,QAAQJ,OAAOC,WAAYD,OAAOE,aAC3CW,SAASC,KAAKC,YAAYxB,EAASyB,YAGnC,MAAMC,EAAS,IAAIC,IAEnBC,QAAQC,IAAI,4BAADC,OADO,cAElBJ,EAAOK,KAFW,YAEMC,IACpB/B,EAAQ+B,EAAKlC,MACbG,EAAMgC,MAAMf,IAAI,GAAI,GAAI,IACxBpB,EAAMuB,IAAIpB,GACV2B,QAAQC,IAAI,mCACbK,EAAYC,IACXP,QAAQO,MAAM,uBAAwBA,KAI1CjC,IAwBJkC,GAGO,KACH3B,OAAO4B,oBAAoB,SAAU9B,GACrCe,SAASC,KAAKe,YAAYtC,EAASyB,cAExC,IAEI,M,MC/CIc,MArBf,WACI,MAAOC,EAAWC,GAAgBC,oBAAS,GAU3C,OAPA7C,oBAAU,KACN,MAAM8C,EAAQC,WAAW,KACrBH,GAAa,IACd,KACH,MAAO,IAAMI,aAAaF,IAC3B,IAGCG,IAAAC,cAAA,OAAKC,UAAU,OAEXF,IAAAC,cAACnD,EAAU,QCdVqD,IAASC,WAAW5B,SAAS6B,eAAe,SACpD7C,OACHwC,IAAAC,cAACD,IAAMM,WAAU,KACfN,IAAAC,cAACR,EAAG,QAORtD,M","file":"static/js/main.7016e0ef.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect } from 'react';\nimport './Navbar.css';\n\nconst Navbar = () => {\n  useEffect(() => {\n    const navbar = document.querySelector('.navbar');\n    let isFadedOut = false;\n    let interval;\n\n    const fadeOut = () => {\n      if (navbar) {\n        navbar.classList.add('fade-out');\n        isFadedOut = true;\n      }\n    };\n\n    const fadeIn = () => {\n      if (navbar) {\n        navbar.classList.remove('fade-out');\n        isFadedOut = false;\n        clearInterval(interval); // Clear the interval when hovered\n        interval = setInterval(fadeOut, 2000); // Restart the interval\n      }\n    };\n\n    interval = setInterval(fadeOut, 2000); // Initial fade-out after 3 seconds\n\n    if (navbar) {\n      navbar.addEventListener('mouseover', fadeIn);\n    }\n\n    return () => {\n      clearInterval(interval); // Cleanup the interval on component unmount\n      if (navbar) {\n        navbar.removeEventListener('mouseover', fadeIn);\n      }\n    };\n  }, []);\n    return (\n        <div>\n            <nav className=\"navbar\">\n                <div className=\"navbar-links\">\n                    <div><a href=\"/home\">Work</a></div>\n                    <div><a href=\"/about\">Projects</a></div>\n                </div>\n                <div className=\"navbar-logo\">\n                    <a href=\"/\">You Gao</a>\n                </div>\n                <div className=\"navbar-links\">\n                    <div><a href=\"/services\">About Me</a></div>\n                    <div><a href=\"https://blog.yougao.dev/\">To Blog</a></div>\n                </div>\n            </nav>\n        </div>\n    );\n};\n\nexport default Navbar;","import React, { useEffect } from 'react';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n\nconst Background = () => {\n    useEffect(() => {\n        let scene, camera, renderer, model;\n\n        function init() {\n            // Create scene\n            scene = new THREE.Scene();\n            scene.background = new THREE.Color(0xffffff); // Set background color to black\n            // Create camera\n            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n            camera.position.set(0, 10, 0); // Position the camera above the scene\n            camera.lookAt(0, 0, 0); //\n\n            // Add light\n            const light = new THREE.DirectionalLight(0xffffff, 10); // Increased intensity to 2\n            light.position.set(0, 0, 1);\n            scene.add(light);\n\n            // Create renderer\n            renderer = new THREE.WebGLRenderer();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            document.body.appendChild(renderer.domElement);\n\n            // Load the model\n            const loader = new GLTFLoader();\n            const modelPath = 'yoshi.glb'; // Adjust this path if necessary\n            console.log(`Loading model from path: ${modelPath}`);\n            loader.load(modelPath, (gltf) => {\n                model = gltf.scene;\n                model.scale.set(30, 30, 30); // Scale the model by a factor of 2\n                scene.add(model);\n                console.log('Model loaded successfully');\n            }, undefined, (error) => {\n                console.error('Error loading model:', error);\n            });\n\n            // Start animation loop\n            animate();\n        }\n\n        function animate() {\n            requestAnimationFrame(animate);\n\n            // Only horizontally rotate the model\n            if (model) {\n                model.rotation.y += 0.01;\n            }\n            // Render the scene\n            renderer.render(scene, camera);\n        }\n\n        // Handle window resize\n        const handleResize = () => {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n        };\n\n        window.addEventListener('resize', handleResize);\n\n        // Initialize the scene\n        init();\n\n        // Cleanup on component unmount\n        return () => {\n            window.removeEventListener('resize', handleResize);\n            document.body.removeChild(renderer.domElement);\n        };\n    }, []);\n\n    return null;\n};\n\nexport default Background;","import React, { useState, useEffect } from 'react';\nimport Loading from './loading/Loading';\nimport Navbar from './navbar/Navbar';\nimport Background from './background/Background';\nimport './App.css'; \n\nfunction App() {\n    const [isLoading, setIsLoading] = useState(true);\n\n    // Simulate loading completion after 3 seconds\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setIsLoading(false);\n        }, 10000);\n        return () => clearTimeout(timer);\n    }, []);\n\n    return (\n        <div className=\"App\">\n            \n            <Background />\n            {/* Other components and content */}\n            \n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}